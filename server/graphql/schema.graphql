scalar Date

input CreateUserInput {
  email: String! @constraint(format: "email", maxLength: 255)
  username: String! @constraint(maxLength: 255, minLength: 3)
  name: String! @constraint(pattern: "^[0-9a-zA-Z ]*$", maxLength: 255)
  password: String! @constraint(maxLength: 255, minLength: 8)
}

input CreateGameInput {
  creatorId: String!
  dimensions: Int!
  gridSize: Int!
}

input LoginInput {
  username: String!
  password: String!
}

type User {
  id: ID!
  email: String!
  username: String!
  name: String!
  roles: [Role]
  gamesCreated: [Game]!
  gamesJoined: [Game]!
  gamesWon: [Game]!
}

type Game {
  id: ID!
  creator: User!
  dimensions: Int!
  gridSize: Int!
  joiner: User
  winner: User
  status: Status!
  createdAt: Date!
  updatedAt: Date!
}

type Query {
  users: [User] @auth(roles: ["USER"])
  user(id: ID!): User @auth(roles: ["USER"])
  games: [Game] @auth(roles: ["USER"])
}

type Mutation {
  login(input: LoginInput): String!
  createUser(input: CreateUserInput): User! @auth(roles: ["USER"])
  createGame(input: CreateGameInput): Game! @auth(roles: ["USER"])
  archiveGame(id: ID!): Game @auth(roles: ["USER"])
  joinGame(gameId: ID!, joinerId: ID!): Game @auth(roles: ["USER"])
}

directive @auth(roles: [String!]) on FIELD_DEFINITION

enum Role {
  USER,
  ADMIN,
  ANON,
}

enum Status {
  CREATED,
  READY,
  STARTED,
  ARCHIVED,
  FINISHED,
}